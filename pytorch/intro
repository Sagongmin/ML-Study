# 파이토치
## 텐서 생성
** 텐서란? 배열과 행렬과 비슷한 자료구조다. pytorch에서는 텐서를 사용하여 모델의 입력, 출력, 매개변수들을 부호화한다. **
import torch
import numpy as np

## 텐서 초기화
** 텐서는 여러가지 방법을 통해 초기화가 가능하다.
### 데이터로 부터 직접 생성하기
data = [[1,2],[3,4]]
x_data = torch.tensor(data)

### NumPy 배열로 부터 생성하기
np_array = np.array(data)
x_np = torch.from_numpy(np_array)

### 다른 Tensor로 부터 생성하기
x_opens = torch.once_like(x_data)
print(f"Ones Tensor: \n {x_ones} \n")
x_rand = torch.rand_like(x_data, dtype=torch.float)
print(f"Random Tensor: \n {x_rand} \n")

out:
Ones Tensor = ([[1, 1],
                [1, 1]])
Random Tensor:
tensor([[0.0965, 0.2738],
        [0.9675, 0.2934]])
        
## 텐서의 속성
** 텐서의 모양, 자료형, 저장위치를 나타낸다. **
tensor = torch.rand(3,4)
print(f"Shape of tensor : {tensor.shape}")
print(f"Datatype of tensor : {tensor.dtype}")
print(f"Device tensor is stored on : {tensor.device}")

out:
Shape of tensor torch.Size([3,4])
Datatype of tensor: torch.float32
Device tensor is stored on: cpu

## 텐서 연산
** 전치, 인덱싱, 슬라이싱, 수학 계산, 선형 대수, 임의 샘플링등 100가지 이상 텐서 연산들이 가능. 기본적으로 텐서는 cpu에 할당. colab 사용 시 GPU 할당을 통해 더 빠른 연산이 가능. **

if torch.cuda.is._available():
    tensor = tensor.to("cuda")
    
### numpy식의 표준 인덱싱과 슬라이싱
tensor = torch.ones(4,4)
print(f"First row: {tensor[0]"})
print(f"First column: {tensor[:, 0]}")
print(f"Last column: {tensor[..., -1]}")
tensor[:,1] = 0
print(tensor)

out:
First row: tensor([1.,1.,1.,1.])
First column : tensor([1.,1.,1.,1.])
Last column : tensor([1.,1.,1.,1.])
tensor([[1.,0.,1.,1.],
        [1.,0.,1.,1.],
        [1.,0.,1.,1.],
        [1.,0.,1.,1.]])
 
 ### 텐서 합치기
 ** 주어진 차원에 따라 일련의 텐서를 연결할 수 있음. ** 
 t1.torch.cat([tensor, tensor, tensor], dim=1)
 print(t1)
 
 out:
tensor([[1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.],
        [1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.],
        [1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.],
        [1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.]])
 
### 산술 연산
** 두 텐서 간의 행렬 곱(matrix multiplication)을 계산함. **
y1 = tensor @ tensor.T
y2 = tensor.matmul(tensor.T)

y3 = torch.rand_like(y1)
torch.matmul(tensor, tensor.T, out=y3)


** 요소별 곱(element-wise product)을 계산함. **
z1 = tensor * tensor
z2 = tensor.mul(tensor)

z3 = torch.rand_like(tensor)
torch.mul(tensor, tensor, out=z3)

** 단일-요소(single-element) 텐서의 모든 값을 하나로 집계(aggregate)하여 요소가 하나인 텐서의 경우, item() 을 사용하여 Python 숫자 값으로 변환할 수 있음. **
agg = tensor.sum()
agg_item = agg.item()
print(agg_item, type(agg_item))

out:
12.0 <class 'float'>

** 바꿔치기(in-place) 연산이란 연산 결과를 피연산자(operand)에 저장하는 연산. _ 접미사가 붙음. **
print(f"{tensor} \n")
tensor.add_(5)
print(tensor)

out:
tensor([[1., 0., 1., 1.],
        [1., 0., 1., 1.],
        [1., 0., 1., 1.],
        [1., 0., 1., 1.]])

tensor([[6., 5., 6., 6.],
        [6., 5., 6., 6.],
        [6., 5., 6., 6.],
        [6., 5., 6., 6.]])
        
        
 ** 바꿔치기 연산은 메모리를 일부 절약하지만, 기록(history)이 즉시 삭제되어 도함수(derivative) 계산에 문제가 발생할 수 있다. **
 
## NumPy 변환
** CPU 상의 텐서와 NumPy 배열은 메모리 공간을 공유하기 때문에, 하나를 변경하면 다른 하나도 변경됨. **
### 텐서를 NumPy 배열로 변환하기
t = torch.ones(5)
print(f"t: {t}")
n = t.numpy()
print(f"n: {n}")

out:
t: tensor([1., 1., 1., 1., 1.])
n: [1. 1. 1. 1. 1.]

###  변경 사항 NumPy 배열에 반영
t.add_(1)
print(f"t: {t}")
print(f"n: {n}")

out:
t: tensor([2., 2., 2., 2., 2.])
n: [2. 2. 2. 2. 2.]

### NumPy 배열을 텐서로 변환하기
n = np.ones(5)
t = torch.from_numpy(n)

np.add(n, 1, out=n)
print(f"t: {t}")
print(f"n: {n}")

out:
t: tensor([2., 2., 2., 2., 2.], dtype=torch.float64)
n: [2. 2. 2. 2. 2.]








        





